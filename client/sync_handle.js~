
function SyncHandle(typeSchema, sh, path){
	this.path = path;
	this.sh = sh;
	this.typeSchema = typeSchema;
}

SyncHandle.prototype.property = function(propertyName){
	var pt = this.typeSchema.properties[propertyName];
	var c = getClassForType(pt);
	return new c(pt, this.sh, this.path.concat([pt.code]));
}

function getClassForType(typeSchema){
	if(type === 'string') return StringHandle;
	else if(type === 'int') return IntHandle;
	else if(type.indexOf('list:') === 0) return ListHandle;
	else if(type.indexOf('set:') === 0) return SetHandle;
}

function ListHandle(typeSchema, sh, path){
}

function SetHandle(typeSchema, sh, path){
}

function IntHandle(typeSchema, sh, path){
}
function StringHandle(typeSchema, sh, path){
}
StringHandle.prototype.set = function(str){
	sh.set(this.path, str);
}


//TODO more handle types

exports.make = function(typeSchema, id, sh){
	_.assertLength(arguments, 3);
	_.assertObject(typeSchema);
	_.assertInt(id);
	_.assertObject(sh);
	
	return new SyncHandle(typeSchema, sh, [typeSchema.code, id]);
}
