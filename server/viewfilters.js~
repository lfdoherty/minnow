
var _ = require('underscorem');

function IsFilter(subjectSet, constraintSet){
	this.subject = subjectSet;
	this.constraint = constraintSet;
}
IsFilter.prototype.passes = function(obj, cb){
	_.assertFunction(cb);
	
	this.subject.setContext(obj);
	
	var subj, cons;
	
	var cdl = _.latch(2, function(){
	
		//console.log(subj + ' === ' + cons + ' ? ' + (subj === cons));
		cb(subj === cons);
	});
	
	this.subject.getIdsOrValues(function(s){
		subj = JSON.stringify(s);
		cdl();
	});
	
	this.constraint.getIdsOrValues(function(c){
		cons = JSON.stringify(c);
		cdl();
	});
	
	
}

function InFilter(subjectSet, constraintSet){
	this.subject = subjectSet;
	this.constraint = constraintSet;
}
InFilter.prototype.passes = function(obj, cb){
	_.assertFunction(cb);
	
	this.subject.setContext(obj);
	
	var subj, cons;
	
	//console.log('evaluating passes');
	
	var cdl = _.latch(2, function(){
	
		if(subj.length === 0){
			cb(false);
			return;
		}
	
		//console.log(subj + ' === ' + cons + ' ? ' + (subj === cons));
		//cb(subj === cons);
		//console.log(JSON.stringify(subj[0]) + ' in ' + JSON.stringify(cons) + '?');
		cb(cons.indexOf(subj[0]) !== -1);
	});
	
	this.subject.getIdsOrValues(function(s){
		//console.log('s: ' + JSON.stringify(s));
		_.assertArray(s);
		//_.assertLength(s, 1);
		subj = s;
		cdl();
	});
	
	this.constraint.getIdsOrValues(function(c){
		cons = c;
		//console.log(JSON.stringify(c));
		_.assertArray(cons);
		cdl();
	});
	
	
}
function makeFilter(f, viewSchema, schema, objectState, broadcaster, subjectSchema, params, sets){
	_.assertLength(arguments, 8);
	_.assertObject(sets);
	
	//console.log(f);
	if(f.type === 'is'){
		return new IsFilter(
			sets.makePathSet(subjectSchema, f.subject, viewSchema, schema, objectState, broadcaster, params), 
			sets.makePathSet(undefined, f.constraint, viewSchema, schema, objectState, broadcaster, params)
			);
	}else if(f.type === 'in'){
		console.log('making in filter');
		_.assertObject(f.subject);
		_.assertObject(f.constraint);
		return new InFilter(
			sets.makePathSet(subjectSchema, f.subject, viewSchema, schema, objectState, broadcaster, params), 
			sets.makePathSet(undefined, f.constraint, viewSchema, schema, objectState, broadcaster, params)
			);
	}else{
		_.errout('TODO: ' + JSON.stringify(f));
	}
}

exports.make = makeFilter;
